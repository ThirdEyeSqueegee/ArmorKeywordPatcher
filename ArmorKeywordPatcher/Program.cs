using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Noggog;

namespace ArmorKeywordPatcher
{
    public class Settings
    {
        [SettingName("Keyword")]
        public string keyword = "";
        [SettingName("Whitelist")]
        public string whitelist = "";
        [SettingName("Blacklist")]
        public string blacklist = "";
    }

    public class Program
    {
        private static Lazy<Settings> _settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "ArmorKeywordPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var cuirassKywd = state.LinkCache.Resolve<IKeywordGetter>("ArmorCuirass").ToLink();
            var kywdToApply = state.LinkCache.Resolve<IKeywordGetter>(_settings.Value.keyword);

            HashSet<uint> whitelist = new();
            HashSet<uint> blacklist = new();
            if (!_settings.Value.whitelist.Equals(""))
                whitelist = Array.ConvertAll(_settings.Value.whitelist.Split(","), uint.Parse).ToHashSet();

            if (!_settings.Value.blacklist.Equals(""))
                blacklist = Array.ConvertAll(_settings.Value.blacklist.Split(","), uint.Parse).ToHashSet();

            foreach (var armor in state.LoadOrder.PriorityOrder.Armor().WinningContextOverrides())
            {
                if (!armor.Record.HasKeyword(cuirassKywd)) continue;
                if (blacklist.Count > 0)
                    if (blacklist.Contains(armor.Record.FormKey.ID)) continue;
                if (whitelist.Count > 0)
                    if (!whitelist.Contains(armor.Record.FormKey.ID)) continue;

                var patched = state.PatchMod.Armors.GetOrAddAsOverride(armor.Record);
                patched.Keywords ??= new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
                patched.Keywords.Add(kywdToApply);
            }
        }
    }
}
